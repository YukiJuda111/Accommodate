// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/getArea.proto

package getArea

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GetArea service

func NewGetAreaEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GetArea service

type GetAreaService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
}

type getAreaService struct {
	c    client.Client
	name string
}

func NewGetAreaService(name string, c client.Client) GetAreaService {
	return &getAreaService{
		c:    c,
		name: name,
	}
}

func (c *getAreaService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "GetArea.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetArea service

type GetAreaHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
}

func RegisterGetAreaHandler(s server.Server, hdlr GetAreaHandler, opts ...server.HandlerOption) error {
	type getArea interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
	}
	type GetArea struct {
		getArea
	}
	h := &getAreaHandler{hdlr}
	return s.Handle(s.NewHandler(&GetArea{h}, opts...))
}

type getAreaHandler struct {
	GetAreaHandler
}

func (h *getAreaHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.GetAreaHandler.Call(ctx, in, out)
}
